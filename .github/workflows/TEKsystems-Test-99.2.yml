name: Build and Integration Test - TEKsystem

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build-test:
    runs-on: windows-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Setup .NET 8 SDK
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: 8.0.x

    # üîß Bygg delprojekten i r√§tt ordning
    - name: Build all projects
      run: |
        dotnet build ThreadPilot_DataModels/ThreadPilot_DataModels.csproj --configuration Release
        dotnet build ThreadPilot_Costs/ThreadPilot_Costs.csproj --configuration Release
        dotnet build ThreadPilot_Databases/ThreadPilot_Vehicles_Databases.csproj --configuration Release
        dotnet build ThreadPilot_Customers_Database/ThreadPilot_Customers_Database.csproj --configuration Release
        dotnet build WebApplication_TEKsystem-Test/WebApplication_TEKsystem-Test.csproj --configuration Release
        dotnet build WebApplication_TEKsystem-Test-B/WebApplication_TEKsystem-Test-B.csproj --configuration Release
        dotnet build ConsoleApp-Test-API/ConsoleApp-Test-API.csproj --configuration Release

    # üöÄ Starta API:er och k√∂r integrationstester i samma steg
    - name: Start APIs and run integration tests
      shell: pwsh
      run: |
        # Starta API:erna i bakgrunden
        $api1 = Start-Job { dotnet run --no-build --project WebApplication_TEKsystem-Test/WebApplication_TEKsystem-Test.csproj --urls https://localhost:7077 }
        $api2 = Start-Job { dotnet run --no-build --project WebApplication_TEKsystem-Test-B/WebApplication_TEKsystem-Test-B.csproj --urls https://localhost:7240 }

        # V√§nta p√• att b√•da API:erna ska svara p√• /health
        $urls = @("https://localhost:7077/health", "https://localhost:7240/health")
        foreach ($url in $urls) {
          Write-Host "üîÑ V√§ntar p√• $url..."
          $success = $false
          for ($i = 0; $i -lt 20; $i++) {
            try {
              $response = Invoke-WebRequest -Uri $url -UseBasicParsing -TimeoutSec 2
              if ($response.StatusCode -eq 200) {
                Write-Host "‚úÖ $url √§r uppe!"
                $success = $true
                break
              }
            } catch {
              Write-Host "‚è≥ $url svarar inte √§n, f√∂rs√∂ker igen..."
              Start-Sleep -Seconds 2
            }
          }
          if (-not $success) {
            throw "‚ùå $url svarade inte i tid"
          }
        }

        # üß™ K√∂r integrationstesterna
        Write-Host "üöÄ Startar integrationstester..."
        dotnet run --no-build --project ConsoleApp-Test-API/ConsoleApp-Test-API.csproj --configuration Release

        # Rensa upp jobb (st√§ng API-processerna)
        Write-Host "üßπ Stoppar API-processer..."
        Stop-Job $api1 -Force
        Stop-Job $api2 -Force
